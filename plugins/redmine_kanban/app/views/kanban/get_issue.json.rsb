api.issue do
  api.id(@issue.id)
  api.project(id: @issue.project_id, name: @issue.project.name) unless @issue.project.nil?
  api.tracker(id: @issue.tracker_id, name: @issue.tracker.name) unless @issue.tracker.nil?
  api.status(id: @issue.status_id, name: @issue.status.name, is_closed: @issue.status.is_closed) unless @issue.status.nil?
  api.priority(id: @issue.priority_id, name: @issue.priority.name) unless @issue.priority.nil?
  api.author(id: @issue.author_id, name: @issue.author.name) unless @issue.author.nil?
  api.assigned_to(id: @issue.assigned_to_id, name: @issue.assigned_to.name, type: @issue.assigned_to.is_a?(Group) ? 'Group': 'User') unless @issue.assigned_to.nil?
  api.category(id: @issue.category_id, name: @issue.category.name) unless @issue.category.nil?
  api.fixed_version(id: @issue.fixed_version_id, name: @issue.fixed_version.name) unless @issue.fixed_version.nil?

  render_issue_parents(@issue, api, {})

  api.block_reason(@issue.kanban_issue&.block_reason)
  api.blocked_at(@issue.real_blocked_at)

  api.subject(@issue.subject)
  api.description(@issue.description)
  api.start_date(@issue.start_date)

  unless @issue.disabled_core_fields.include?('due_date')
    api.due_date(@issue.due_date)
    api.due_date_human(issue_due_date_details(@issue))
  end

  api.done_ratio(@issue.done_ratio)
  api.is_private(@issue.is_private)

  unless @issue.disabled_core_fields.include?('estimated_hours')
    api.estimated_hours(@issue.estimated_hours)
    api.total_estimated_hours(@issue.total_estimated_hours)
  end

  if User.current.allowed_to?(:view_time_entries, @project)
    api.spent_hours(@issue.spent_hours.round(1))
    api.total_spent_hours(@issue.total_spent_hours.round(1))
    api.total_spent_hours_text(issue_spent_hours_details(@issue))
  end

  api.created_on(@issue.created_on)
  api.updated_on(@issue.updated_on)
  api.closed_on(@issue.closed_on)

  @journals = @issue.visible_journals_with_index
  @journals.reverse! if User.current.wants_comments_in_reverse_order?
  api.array(:journals) do
    @journals.each do |journal|
      api.journal(id: journal.id) do
        api.user(id: journal.user_id, name: journal.user.name) unless journal.user.nil?
        api.notes(journal.notes)
        api.created_on(journal.created_on)
        api.private_notes(journal.private_notes)
        api.array(:details) do
          details_to_strings(journal.visible_details).each do |detail|
            api.detail(text: detail)
          end
        end
      end
    end
  end

  if KanbanSettings.is_advanced_checklists_installed?
    api.question_lists_can_add(@issue.editable?)
    api.question_lists_can_add_visa(@issue.editable?)
    api.question_lists(@issue.questionlists.map {|checklist| transform_checklist(checklist)})
  end

  if KanbanSettings.is_tags_installed?
    render_issue_tags(@issue, api)
  end

  api.size(id: @issue.size.id, name: @issue.size.name) if KanbanSettings.is_use_kanban_issue_sizes? && !@issue.size.nil?

  api.start_date_details format_date(@issue.start_date)

  api.blocked_by_issues(@issue.blocked_by_issues) if @issue.is_blocked_by_issues?

end
